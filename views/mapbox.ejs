<% include partials/header %>
	
	<style type="text/css">
		.show_chart{
			position: absolute;
			width: 45%;
		    height:500px;
		    top: 50px;
		    right:-45%;
		    background-color: #FFF;
		    border: 1px solid gray;
		    border-radius: 5px;
		    transition:0.4s ease;
		}
		.chart_close_btn{
			position: absolute;
			top: 5px;
			right: 10px;
		}
	</style>


	<div>
		<h1 style="display: inline;">Mapbox</h1>
		<form style="display: inline;" id="microViewFormId">
			<div class="form-group" style="display: inline;">
				<label>StopID: </label>
				<input type="text" name="stopid" class="form-control" style="width: 100px;display: inline;">
			</div>

			<div class="form-group" style="display: inline;">
				<label>Suburb: </label>
				<select class="form-control" style="display: inline; width: 200px;" name="suburb_name" id="suburb_name_select_id">
					<% for(var i=0; i < suburbs.length; i++) { %>
						<option value="<%= suburbs[i] %>"><%= suburbs[i] %></option>
					<% } %>
				</select>
			</div>
		</form>
		<button class="btn btn-primary" id="microViewForm_btn">Submit</button>
		<button id="testBtn">Add circle</button>
		<button class="btn btn-primary" id="show_chart_btn">Show Chart</button>
		
	</div>

	<div class="" style="position: relative;overflow: hidden;">
		<div id='map' style='width: 100%; height: 800px;'></div>
		<div class="show_chart">
			<button type="button" class="close chart_close_btn" aria-label="Close" id="chart_close_btn">
			  <span aria-hidden="true">&times;</span>
			</button>
			Chart
			<div id="chart_content_info"></div>
			<% include partials/microViewChart %>

		</div>
	</div>


	<script type="text/javascript">
		
		$(document).ready(function(){

			//chart 
			var ctx = document.getElementById('myChart').getContext('2d');
			var chart = new Chart(ctx, {
				type: 'line',

			    // The data for our dataset
			    data: {
			        labels: [],
			        datasets: [{
			            label: "",
			            backgroundColor: 'rgba(0, 137, 229, 0.5)',
			            borderColor: 'rgb(0, 0, 170)',
			            data: [],
			        }]
			    },

			    // Configuration options go here
			    options: {}
			});

			//api from Tim
			//random data
			var messages = <%-JSON.stringify(dl)%>;
			// console.log(messages);
			var msgO = JSON.parse(messages);
			console.log(msgO[0]);
			console.log(msgO.length);

			var suburb_name_tmp_store;

			var clickStopIDCircleListenerVar = clickStopIDCircleListener;
			var mouseEnterCircleListenerVar = mouseEnterCircleListener;
			var mouseLeaveCircleListenerVar = mouseLeaveCircleListener;


			function generateCoord(c) {
				var lat = c[0];
				var lng = c[1];

				var leftTop = [lng, lat];
				var rightTop = [lng+0.002, lat];
				var rightDown = [lng+0.002, lat-0.002];
				var leftDown = [lng, lat-0.002];
				return [leftTop, rightTop, rightDown, leftDown];
			}
			// console.log(generateCoord([msgO[0].lat, msgO[0].lon]));

			function returnGeojsonObject(loc, height) {
				var o = {
					"type": "Feature",
                    "properties": {
						"height": height,
					},	                        
                    "geometry": {
                        "type": "Polygon",
                        "coordinates": [[
                        	// generateCoord([msgO[0].lat, msgO[0].lon])
                        	loc[0],
                        	loc[1],
                        	loc[2],
                        	loc[3]
                        	
                        ]]
                    },
				}
				return o;
			}

			function generateGeojsonObjectList() {
				var ol = [];
				for (var i = 0; i < msgO.length; i++) {
					var height = msgO[i].ScanOn * 100;
					var loc = generateCoord([msgO[i].lat, msgO[i].lon]);
					ol.push(returnGeojsonObject(loc, height));
				}
				return ol;
			}
			// console.log(generateGeojsonObjectList());

			//mapbox 
			mapboxgl.accessToken = 'pk.eyJ1IjoieXVudGFvdyIsImEiOiJjamxqYmphZXcwYThzM3BvYTF4b2h5bDg3In0.8yAFnp1ye4odiwsvOxOi7w';
			var map = new mapboxgl.Map({
			    container: 'map',
			    // style: 'mapbox://styles/mapbox/streets-v9',
			    style: 'mapbox://styles/mapbox/light-v9',
			    center: [144.9631, -37.8136],
			    zoom: 11,
			    pitch: 60,
    			bearing: -30,
			});

			map.on('load', function() {
				console.log("map loaded");

				/*
		    	map.addLayer({
			        'id': 'test',
			        'type': 'fill-extrusion',
			        'source': {
			            "type": "geojson",
		                "data": {
		                    "type": "FeatureCollection",
		                    "features": generateGeojsonObjectList(),
		                },
			        },
			        'minzoom': 8,
			        'paint': {
			            'fill-extrusion-color': '#FF0000',
			            'fill-extrusion-height': ['get', 'height'],
			            'fill-extrusion-base': 10,
			            'fill-extrusion-opacity': .6
			        }
			    });
			    */
			    // map.on('click', 'circle', function (e) {
			    // 	console.log(e.features.geometry.coordinates);
			    // })



			})




			// micro view form submit event
			$('#microViewForm_btn').click(function(event) {
				// console.log("btn clicked");
				if (map.getLayer("stopIDInSuburb-"+suburb_name_tmp_store) == undefined) {
					console.log("layer undefined");
				} else {
					map.off('click', 'stopIDInSuburb-'+suburb_name_tmp_store, clickStopIDCircleListenerVar);
				    map.off('mouseenter', 'stopIDInSuburb-'+suburb_name_tmp_store, mouseEnterCircleListenerVar);

				 //    // Change it back to a pointer when it leaves.
				    map.off('mouseleave', 'stopIDInSuburb-'+suburb_name_tmp_store, mouseLeaveCircleListenerVar);

					map.removeLayer("stopIDInSuburb-"+suburb_name_tmp_store);
					map.removeSource("stopIDInSuburb-"+suburb_name_tmp_store);
				}
				
				


				var suburbName = $('#suburb_name_select_id').val();
				// console.log(suburbName);
				suburb_name_tmp_store = suburbName;

				$.ajax({
					type: "POST",
					url: "/api/microViewForm",
					data: {"suburb_name":suburbName},
					dataType: "json",
					success: function(msg) {
						console.log(msg);
						map.flyTo({
							center: [msg.location[1], msg.location[0]], 
							zoom: 14
						});

						generateStopIdInSuburb(suburbName);
					},
					error: function() {

					}
				})
			});

			$('#testBtn').click(function() {
				addStopIDToSuburb();
			});

			function addStopIDToSuburb() {
				map.addLayer({
			        'id': 'addcircle',
			        'type': 'circle',
			        'source': {
			            "type": "geojson",
		                "data": {
		                    "type": "FeatureCollection",
		                    "features": [
		                    	{
			                    	"type": "Feature",                       
				                    "geometry": {
				                        "type": "Point",
				                        "coordinates": [144.9612, -37.7964]				                        
				                    },
				                },
				                {
				                	"type": "Feature",                       
				                    "geometry": {
				                        "type": "Point",
				                        "coordinates": [144.9662, -37.7964]
				                    },
				                }
			                ]
		                },
			        },
			        'minzoom': 8,
			        'paint': {
			            'circle-radius': 20,
			            'circle-color': '#FF0000',
			            'circle-opacity': .6,
			        }
			    });
				try{
			    	map.removeLayer("test");
			    } catch(err) {}
			}

			function generateStopIdInSuburb(suburb) {
				$.ajax({
					type: "POST",
					url: "/api/getAllStopIdInSuburb",
					data: {"suburbName":suburb},
					dataType: "json",
					success: function(msg) {
						console.log(msg);

						map.addLayer({
							'id': 'stopIDInSuburb-'+suburb,
					        'type': 'circle',
					        'source': {
					            "type": "geojson",
				                "data": {
				                    "type": "FeatureCollection",
				                    "features": generateGeojsonObjectListStopIDInSuburb(msg.locations),
				                },
					        },
					        'minzoom': 8,
					        'paint': {
					            'circle-radius': 20,
					            'circle-color': '#FF0000',
					            'circle-opacity': .6,
					        }
						});

						map.on('click', 'stopIDInSuburb-'+suburb, clickStopIDCircleListenerVar);
					    map.on('mouseenter', 'stopIDInSuburb-'+suburb, mouseEnterCircleListenerVar);

					    // Change it back to a pointer when it leaves.
					    map.on('mouseleave', 'stopIDInSuburb-'+suburb, mouseLeaveCircleListenerVar);

					},
					error: function() {

					}
				})
			}

			function returnGeojsonObjectStopIDInSuburb(loc) {
				var o = {
					"type": "Feature",
					"properties": {
						"stopid": loc[2],
						"stopname": loc[3]
					},                   
                    "geometry": {
                        "type": "Point",
                        "coordinates": [loc[1], loc[0]]
                    },
				}
				return o;
			}

			function generateGeojsonObjectListStopIDInSuburb(locs) {
				var ol = [];
				for (var i = 0; i < locs.length; i++) {
					ol.push(returnGeojsonObjectStopIDInSuburb(locs[i]));
				}
				return ol;
			}


			function clickStopIDCircleListener(e) {
				var location = e.features[0].geometry.coordinates;
				var name = e.features[0].properties.stopname;
				var stopid = e.features[0].properties.stopid;
				console.log(location);
				showChart();
				$('#chart_content_info').text("Location:"+location + " Stop name:" + name + "Stop ID: " + stopid);
				// $('#chart_content_info').text("hello");

				$.ajax({
					type: "POST",
					url: "/api/getScanOnStopCount",
					data: {"stopid":stopid, "mon":"2017-05"},
					dataType: "json",
					success: function(msg) {
						console.log(msg);
						var msgO = JSON.parse(msg);

						var dateLabelList = generateDateLabel("2017-05");
						var scanOnList = new Array(dateLabelList.length);
						for (var i = 0; i < scanOnList.length; i++) {
							scanOnList[i] = 0;
						}
						for (var i = 0; i < msgO.length;i++) {
							var d = msgO[i].date;
							var dList = d.split("-");
							var day = parseInt(dList[2]);
							var index = day - 1;
							scanOnList[index] += msgO[i].ScanOn;
						}
						console.log(dateLabelList);
						console.log(scanOnList);


						chart.data.labels = dateLabelList;
						chart.data.datasets[0].data = scanOnList;
						chart.update();
					},
					error: function() {

					}
				});
			}
			function mouseEnterCircleListener() {
				map.getCanvas().style.cursor = 'pointer';
			}
			function mouseLeaveCircleListener() {
				map.getCanvas().style.cursor = '';
			}


			//show chart function 
			$('#show_chart_btn').click(function() {
				showChart();
			})
			$('#chart_close_btn').click(function() {
				hideChart();
			})

			function showChart() {
				$('.show_chart').css('right', '20px');
			}
			function hideChart() {
				$('.show_chart').css('right', '-45%');
			}

			function generateDateLabel(mon) {
				var l = mon.split("-");
				var y = parseInt(l[0]);
				var m = parseInt(l[1]);

				var days = daysInMonth(m ,y);
				var i = 1;
				var labels = [];
				for (var j = 0; j < days; j++) {
					var tmpS;
					if (i < 10) {
						tmpS = "0"+i;
					} else {
						tmpS = i;
					}
					labels.push(mon+"-"+tmpS);
					i++;
				}
				return labels;
			}

			function daysInMonth (month, year) {
			    return new Date(year, month, 0).getDate();
			}

		})

	</script>

<% include partials/footer %>